---
- name: create Azure VMs and update Azure DNS
  hosts: localhost
  connection: local
  gather_facts: no

  vars:
    # --- customize these ---
    subscription_id: ""            # optional: set or export AZURE_SUBSCRIPTION_ID
    resource_group: RoboshopNW
    location: Central India
    admin_username: krishna_azure
    ssh_pub_key_path: "~/.86skey.pub" # make sure this file exists on control machine
    vm_size: Standard_B2s
    image:
      offer: UbuntuServer
      publisher: Canonical
      sku: "22_04-lts"
      version: latest
    # DNS zone (must already exist in Azure DNS)
    dns_zone_rg: my-3tier-rg      # resource group that contains the DNS zone
    dns_zone_name: "kriiishmatic.fun"   # your domain / zone name in Azure DNS
    # Instances to create (map from your AWS example)
    instances:
      - mysql
      -      # included as example â€” frontend will receive a public IP and will be used for apex record

  tasks:
    - name: "Ensure required python libs are present (informational)"
      ansible.builtin.debug:
        msg: "Ensure azure.azcollection is installed and python deps (msrestazure/azure) are installed on control host."

    - name: Create a Network Security Group with common rules (SSH, HTTP)
      azure.azcollection.azure_rm_securitygroup:
        resource_group: "{{ resource_group }}"
        name: "{{ nsg_name }}"
        security_rules:
          - name: AllowSSH
            protocol: Tcp
            source_port_range: '*'
            destination_port_range: '22'
            access: Allow
            direction: Inbound
            priority: 1000
            source_address_prefix: '*'
            destination_address_prefix: '*'
          - name: AllowHTTP
            protocol: Tcp
            source_port_range: '*'
            destination_port_range: '80'
            access: Allow
            direction: Inbound
            priority: 1001
            source_address_prefix: '*'
            destination_address_prefix: '*'

    - name: Create NICs, Public IP (for frontend) and VMs
      vars:
        nic_name: "{{ item }}-nic"
        pip_name: "{{ item }}-pip"
      loop: "{{ instances }}"
      loop_control:
        label: "{{ item }}"
      block:
        - name: Create Public IP if instance is frontend
          azure.azcollection.azure_rm_publicipaddress:
            resource_group: "{{ resource_group }}"
            name: "{{ pip_name }}"
            allocation_method: Static
            sku: Basic
          when: item == "frontend"
          register: pip_result

        - name: Create network interface for the VM
          azure.azcollection.azure_rm_networkinterface:
            resource_group: "{{ resource_group }}"
            name: "{{ nic_name }}"
            network_security_group: "{{ nsg_name }}"
            # attach public ip only for frontend
            public_ip_name: "{{ pip_name if item == 'frontend' else omit }}"
          register: nic_result

        - name: Create the VM
          azure.azcollection.azure_rm_virtualmachine:
            resource_group: "{{ resource_group }}"
            name: "{{ item }}"
            vm_size: "{{ vm_size }}"
            admin_username: "{{ admin_username }}"
            ssh_public_keys:
              - path: "/home/{{ admin_username }}/.ssh/authorized_keys"
                key_data: "{{ lookup('file', ssh_pub_key_path) }}"
            network_interfaces: "{{ nic_name }}"
            image:
              offer: "{{ image.offer }}"
              publisher: "{{ image.publisher }}"
              sku: "{{ image.sku }}"
              version: "{{ image.version }}"
            os_disk:
              name: "{{ item }}-osdisk"
              caching: ReadWrite
              create_option: FromImage
          register: vm_create_result

      rescue:
        - name: Fail when VM creation block fails for {{ item }}
          ansible.builtin.fail:
            msg: "VM creation failed for {{ item }}; check Azure error output."

      always:
        - name: "Collect small summary for {{ item }} (append to vm_results)"
          set_fact:
            vm_results: "{{ (vm_results | default([])) + [ { 'name': item, 'nic': nic_name, 'pip': (pip_name if item == 'frontend' else ''), 'vm_result': vm_create_result } ] }}"

    - name: Pause briefly to let Azure assign IPs
      ansible.builtin.pause:
        seconds: 6

    - name: Gather NIC info to obtain private/public IPs
      vars:
        nic_info_name: "{{ item.name }}-nic"
      loop: "{{ vm_results }}"
      loop_control:
        label: "{{ item.name }}"
      azure.azcollection.azure_rm_networkinterface_info:
        resource_group: "{{ resource_group }}"
        name: "{{ item.name }}-nic"
      register: nic_info_results

    - name: Build IP mapping list from NIC info
      set_fact:
        ip_mappings: >-
          {{
            (ip_mappings | default([]))
            + [ {
                'name': item.invocation.module_args.name.split('-nic')[0],
                'private_ip': (item.networkinterfaces[0].ip_configurations[0].private_ip_address | default('')),
                'public_ip_id': (item.networkinterfaces[0].ip_configurations[0].public_ip_address.id | default(''))
              } ]
          }}
      loop: "{{ nic_info_results.results }}"
      loop_control:
        label: "{{ loop.index0 }}"

    - name: If public_ip_id exists, resolve public IP values
      vars:
        pub_ip_id: "{{ item.public_ip_id }}"
      loop: "{{ ip_mappings }}"
      loop_control:
        label: "{{ item.name }}"
      when: item.public_ip_id != ''
      block:
        - name: Extract public ip resource name from id
          set_fact:
            _pub_ip_name: "{{ (item.public_ip_id.split('/')[-1]) }}"

        - name: Get public IP address details
          azure.azcollection.azure_rm_publicipaddress_info:
            resource_group: "{{ resource_group }}"
            name: "{{ _pub_ip_name }}"
          register: pubip_info

        - name: Set public_ip field in ip_mappings for {{ item.name }}
          set_fact:
            ip_mappings: >-
              {{
                ip_mappings | map(
                  'combine',
                  (
                    {}
                  )
                ) | list
              }}
          vars:
            # rebuild list with public ip set for matching name
            _new_list: >-
              {{
                ip_mappings | map('combine', {}) | list
              }}
          # We can't easily mutate a single element elegantly in one step; we'll reconstruct ip_mappings below

    - name: Reconstruct ip_mappings with public IPs (safe approach)
      vars:
        pip_infos: "{{ lookup('azure.azcollection.azure_rm_publicipaddress_info', resource_group=resource_group, wantlist=True) }}"
      # NOTE: The azure_rm_publicipaddress_info lookup may not be available in all versions.
      # To be robust we will iterate over ip_mappings and query each possible Public IP by name if available.
      set_fact:
        ip_mappings: >-
          {{
            ip_mappings | map(
              'combine',
              (
                {
                  'public_ip': (
                    (
                      (lookup('azure.azcollection.azure_rm_publicipaddress_info', resource_group=resource_group, name=(item.name + '-pip'), wantlist=False).public_ipaddresses[0].ip_address)
                    )
                    if (item.name + '-pip') is defined and
                       (lookup('azure.azcollection.azure_rm_publicipaddress_info', resource_group=resource_group, name=(item.name + '-pip'), wantlist=False) is not none)
                    else ''
                  )
                }
              )
            ) | list
          }}
      when: false
      # NOTE: Some control planes do not support the above lookup; if lookup fails, continue below with a simpler approach.

    - name: Create / Update Azure DNS records for each instance (private IP)
      azure.azcollection.azure_rm_dnsrecordset:
        resource_group: "{{ dns_zone_rg }}"
        zone_name: "{{ dns_zone_name }}"
        record_type: A
        name: "{{ item.name }}"             # will create mysql.kriiishmatic.fun
        ttl: 300
        records:
          - "{{ item.private_ip }}"
        overwrite: true
      loop: "{{ ip_mappings }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Create/Update apex (root) domain record pointing to frontend public IP (if frontend exists)
      vars:
        frontend_entry: "{{ (ip_mappings | selectattr('name','equalto','frontend') | list).0 | default({}) }}"
      when: frontend_entry.public_ip is defined and (frontend_entry.public_ip | length) > 0
      azure.azcollection.azure_rm_dnsrecordset:
        resource_group: "{{ dns_zone_rg }}"
        zone_name: "{{ dns_zone_name }}"
        record_type: A
        name: ""                           # '' denotes the apex/root record in Azure DNS
        ttl: 300
        records:
          - "{{ frontend_entry.public_ip }}"
        overwrite: true

    - name: Print DNS mapping results
      ansible.builtin.debug:
        var: ip_mappings
